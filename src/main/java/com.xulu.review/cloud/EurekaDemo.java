package com.xulu.review.cloud;

/**
 * @author xulu  E-mail:java_xul@163.com
 * @version 1.0
 * @create 2019-07-04 13:18
 **/
public class EurekaDemo {

    /**
     * springcloud-eureka
     * 微服务注册中心
     * eureka自我保护机制：某时刻某一个微服务不可用了，eureka不会立刻清理，
     * 依旧会对该微服务的信息进行保存。
     *
     * 在自我保护模式中，eureka server会保护服务注册表中的信息，不再注销任何
     * 实例。当它收到的心跳数重新恢复到阈值以上时，该eureka server节点就会自
     * 动推出自我保护模式。它的设计哲学就是宁可保留错误的服务注册信息，也不盲目
     * 注销任何可能健康的服务实例。一句话讲解：好死不如赖活着。
     *
     * eureka的集群配置：
     * 三台机，每台机向其他两台机注册
     *
     * eureka与zk的对比：
     * zookeeper：CP
     * 当向注册中心查询服务列表时，我们可以容忍注册中心返回的时几分钟之前的注册信息，但不能接受服务
     * 直接down掉不可用。耶就是说，服务注册功能对可用性的要求高于一致性。但是zk会出现这样一种情况，
     * 当master节点因为网络故障与其他节点失去联系时，剩余节点会重新进行leader选举。问题在于，选举
     * leader的时间太长，30～120s，且选举期间整个zk集群都是不可用的，这就导致在选举期间注册服务瘫
     * 痪。在云部署的环境下，因网络问题使得zk集群失去master节点时较大概率会发生的事，瑞然服务能够
     * 最终恢复，但是漫长的选举时间导致注册长期不可用是不能容忍的。
     *
     * eureka：AP
     * eureka在设计时就优先保证了可用性。eureka各个节点都是平等的，几个节点挂掉不会影响正常节点的
     * 工作，剩余的节点依然可以提供注册和查询服务。而eureka的客户端在向某个eureka注册时如果发生连
     * 接失败，则会自动切换至其他节点，只要有一台eureka还在，就能保证注册服务可用，只不过查到的信息
     * 可能不是最新的（不保证强一致性）。除此之外，eureka还有一种自我保护机制，如果在15分钟内超过
     * 85%的节点都没有正常的心跳，那么eureka就认为客户端与注册中心出现了网络故障，此时会出现以下几
     * 种情况：
     *  1。eureka不再从注册列表中移除因为长时间没收到心跳而应该过期的服务
     *  2。eureka仍然能够接受新服务的注册和查询请求，但不会被同步到其他节点上（即保证当前节点依然可用）
     *  3。当前网络稳定时，当前实例新的注册信息会被同步到其他节点中
     *
     * 综上：eureka可以很好的应对因网络故障导致部分节点失去联系的情况，因而不会向zk那样使整个注册服务瘫痪。
     */

    /**
     * zookeeper的分布式一致性算法（ZAB：zookeeper atomic broadcast）
     */
}
