package com.xulu.review.cloud;

/**
 * @author xulu  E-mail:java_xul@163.com
 * @version 1.0
 * @create 2019-07-05 12:50
 **/
public class HystrixDemo {
    /**
     * Hystrix断路器
     * 向调用方返回一个符合预期的、可处理的备选响应，而不是长时间的等待
     * 或者抛出一个调用方无法处理的异常。
     * 会进行服务的降级，进而熔断该节点微服务的调用，快速返回"错误"的响
     * 应信息。
     *
     * 服务的降级：整体资源快不够用了，忍痛将某些服务关掉，待度过难关，
     * 再开启回来。
     * 服务的降级处理是在客户端实现的，与服务端没有关系。
     * 当服务端down机时，由于客户端我们做了降级处理，让客户端在服务端不
     * 可用时也会获得提示信息而不会挂起耗死服务器。
     *
     * 熔断和降级的区别：
     * 1。服务熔断：一般是某个服务故障或者异常引起，类似现实世界中的"保险丝"
     * 当某个异常条件被触发，直接熔断整个服务，而不是一直等待此服务直到超时。
     * 2。服务降级：一般是从整体负荷考虑。就是当某个服务熔断之后，服务器将不
     * 再被调用，此时客户端可以自己准备一个本地的fallback回调，返回一个缺省
     * 值。这样做，虽然服务水平下降，但好歹可用，比直接挂掉要强。
     *
     * HystrixDashboard：
     * 除了隔离依赖服务的调用以外，Hystrix还提供了准实时的调用监控（HystrixDashboard）
     * Hystrix会持续记录所有通过Hystrix发起的请求执行信息，并以报表和图形的
     * 形式展示给用户，包括每秒执行多少请求多少成功多少失败等。
     * Netflix通过hystrix-metrics-event-steam项目实现了对以上指标的监控。
     * Springcloud耶提供了Hystrix Dashboard的整合，对监控内容转化成可视化
     * 界面。
     */
}
