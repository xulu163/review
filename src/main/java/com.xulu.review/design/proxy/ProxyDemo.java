package com.xulu.review.design.proxy;

/**
 * 代理模式
 *
 * @author xulu  E-mail:java_xul@163.com
 * @version 1.0
 * @create 2019-07-22 13:24
 **/
public class ProxyDemo {

    /**
     * 代理模式：为一个对象
     *
     * 又一个很直观的好处是：可以在调用方法之前加入统一的逻辑，如安全检测
     */

    /**
     * 三种代理：静态代理、动态代理（jdk代理）、cglib代理（属于动态代理的范围）
     *
     *
     */

    /**
     * 静态代理的优缺点：
     *    优点：在不修改目标对象的功能前提下，能通过代理对象对目标功能进行扩展
     *    缺点：因为代理对象需要与目标对象实现一样的接口，所以会有很多代理类
     *    一旦接口增加方法，目标对象与代理对象都要维护
     */

    /**
     * jdk动态代理需要实现代理对象的接口
     */

    /**
     * cglib代理对象不需要实现任何接口就能够实现代理
     * cglib是基于拦截器实现
     * cglib动态代理底层是通过字节码的处理框架asm来转换字节码并生成新的类
     */
}
